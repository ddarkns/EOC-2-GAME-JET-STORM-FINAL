/**
 * Game class - Core game engine that manages the entire gameplay
 * Handles game initialization, main loop, player input, enemy spawning,
 * collision detection, and game state management
 */
class Game {
    // Core game objects
    field PlayersJet jet;           // The player's jet instance
    field BulletSet bullets;        // Manages all bullets in the game
    field EnemyManager enemies;     // Handles enemy spawning and management
    field HighScore score;          // Tracks scoring system
    
    // Game timing and spawn control
    field int frameCounter;         // General frame counter for game timing
    field int spawnFrameCounter;    // Controls basic spawn timing
    field int forcedSpawnCounter;   // Forces enemy spawns at certain intervals
    field int laneTimer;           // Controls timing of lane-based enemy patterns
    field int topSpawnTimer;       // Timer for enemies spawning from top
    field int bottomSpawnTimer;    // Timer for enemies spawning from bottom
    field int rightSpawnTimer;     // Timer for enemies spawning from right
    field int midAreaTimer;        // Timer for enemies spawning in middle area
    
    // Game state management
    field int spawnPattern;        // Current enemy spawn pattern (0-7)
    field boolean respawning;      // Tracks if player is in respawn state
    field int respawnTimer;        // Controls invulnerability after respawn

    /** 
     * Constructor: Initializes a new game instance
     * Sets up all game components and initial state
     */
    constructor Game new() {
        do MathLib.init();  // Initialize random number generation
        
        // Create core game objects
        let jet = PlayersJet.new(80, 100);         // Create player jet at starting position
        let bullets = BulletSet.new();             // Initialize bullet management
        let score = HighScore.new();               // Set up scoring system
        let enemies = EnemyManager.new(30, score); // Create enemy manager with max 30 enemies
        
        // Initialize all timing counters
        let frameCounter = 0;
        let spawnFrameCounter = 0;
        let forcedSpawnCounter = 0;
        let laneTimer = 0;
        let topSpawnTimer = 0;
        let bottomSpawnTimer = 0;
        let rightSpawnTimer = 0;
        let midAreaTimer = 0;
        
        // Initialize game state
        let spawnPattern = 0;
        let respawning = false;
        let respawnTimer = 0;
        return this;
    }

    /** 
     * Displays player's remaining lives on screen
     * Updates whenever player loses a life
     */
    method void displayLives() {
        do Output.moveCursor(0, 20);
        do Output.printString("Lives: ");
        do Output.printInt(jet.getLives());
        return;
    }

    /** 
     * Handles player respawn after death
     * Maintains lives count and sets respawn protection
     */
    method void respawnPlayer() {
        var int currentLives;
        let currentLives = jet.getLives();    // Store current lives
        let respawning = true;                // Enable respawn protection
        let respawnTimer = 0;                 // Reset respawn timer
        do jet.dispose();                     // Clean up old jet instance
        let jet = PlayersJet.new(80, 100);   // Create new jet at start position
        
        // Restore previous life count (minus one from death)
        while (jet.getLives() > currentLives) {
            do jet.loseLife();
        }
        return;
    }

    /** 
     * Main game loop - handles all game logic and updates
     * Controls game flow, input processing, and state updates
     */
    method void run() {
        // Local variables for game loop
        var Menu menu;             // Main menu instance
        var GameOver over;         // Game over screen
        var Game game;             // New game instance for restart
        var int key;               // Current keyboard input
        var int key1;             // Secondary keyboard input
        var boolean gameOver;      // Game over state flag
        var int i, r;             // Loop counter and random variation

        let gameOver = false;

        // Show main menu and initialize game
        let menu = Menu.new();
        do menu.show();
        do menu.dispose();
        do Screen.clearScreen();
        do displayLives();
        
        // Initial enemy spawn setup
        do enemies.spawnEnemyFromTop();
        do Sys.wait(2);
        do enemies.spawnEnemyFromBottom();
        do Sys.wait(2);
        do enemies.spawnEnemyMidArea();
        do Sys.wait(2);
        do enemies.spawnEnemy();
        do Sys.wait(2);

        // Main game loop
        while (true) {
            // Update timing counters
            let frameCounter = frameCounter + 1;
            let spawnFrameCounter = spawnFrameCounter + 1;
            let forcedSpawnCounter = forcedSpawnCounter + 1;
            let laneTimer = laneTimer + 1;
            let topSpawnTimer = topSpawnTimer + 1;
            let bottomSpawnTimer = bottomSpawnTimer + 1;
            let rightSpawnTimer = rightSpawnTimer + 1;
            let midAreaTimer = midAreaTimer + 1;
            
            // Handle respawn protection timing
            if (respawning) {
                let respawnTimer = respawnTimer + 1;
                if (respawnTimer > 50) {  // End respawn protection after 50 frames
                    let respawning = false;
                }
            }
            
            // Process player input
            let key = Keyboard.keyPressed();
            if (~respawning) {  // Only allow control if not respawning
                do jet.applyGravity();  // Apply gravity if not moving up
                
                if (key = 87) {         // 'W' key - move up
                    do jet.moveUp();
                }

                if ((key = 32) & (frameCounter > 5)) {  // Spacebar - fire with cooldown
                    do bullets.fire(jet.getX(), jet.getY());
                    let frameCounter = 0;
                }
            }
            
            // Enemy spawn logic with randomized timing
            let r = MathLib.abs(laneTimer * frameCounter) & 15;
            
            // Regularly spawn enemies from the top with slight randomization
            if (topSpawnTimer > (80 + r)) {  // ~1.6-2.0 seconds with variation
                do enemies.spawnEnemyFromTop();
                let topSpawnTimer = 0;
            }
            
            // Regularly spawn enemies from the bottom with slight randomization
            if (bottomSpawnTimer > (85 + r)) {  // ~1.7-2.1 seconds with variation
                do enemies.spawnEnemyFromBottom();
                let bottomSpawnTimer = 0;
            }
            
            // Regularly spawn enemies in middle area
            if (midAreaTimer > (100 + r)) {  // ~2.0-2.3 seconds with variation
                do enemies.spawnEnemyMidArea();
                let midAreaTimer = 0;
            }
            
            // Regularly spawn enemies from the right with slight randomization
            if (rightSpawnTimer > (70 + r)) {  // ~1.4-1.8 seconds with variation
                do enemies.spawnEnemy();
                let rightSpawnTimer = 0;
            }
            
            // Every 8 seconds, generate a special pattern
            if (laneTimer > 400) {
                let laneTimer = 0;
                let spawnPattern = (spawnPattern + 1) & 7;  // Cycle through patterns 0-7
                
                // Different patterns based on counter
                if (spawnPattern = 0) {
                    // Triple top spawns - create a curtain from above
                    let i = 0;
                    while (i < 3) {
                        do enemies.spawnEnemyFromTop();
                        do Sys.wait(3);
                        let i = i + 1;
                    }
                }
                else {
                    if (spawnPattern = 1) {
                        // Triple bottom spawns - create a rising curtain
                        let i = 0;
                        while (i < 3) {
                            do enemies.spawnEnemyFromBottom();
                            do Sys.wait(3);
                            let i = i + 1;
                        }
                    }
                    else {
                        if (spawnPattern = 2) {
                            // Alternating top/bottom - creates a pincer effect
                            do enemies.spawnEnemyFromTop();
                            do Sys.wait(4);
                            do enemies.spawnEnemyFromBottom();
                            do Sys.wait(4);
                            do enemies.spawnEnemyFromTop();
                        }
                        else {
                            if (spawnPattern = 3) {
                                // Triple right spawns - create a wall of enemies
                                let i = 0;
                                while (i < 3) {
                                    do enemies.spawnEnemy();
                                    do Sys.wait(3);
                                    let i = i + 1;
                                }
                            }
                            else {
                                if (spawnPattern = 4) {
                                    // Triple mid-area spawns - enemies in the middle
                                    let i = 0;
                                    while (i < 3) {
                                        do enemies.spawnEnemyMidArea();
                                        do Sys.wait(3);
                                        let i = i + 1;
                                    }
                                }
                                else {
                                    if (spawnPattern = 5) {
                                        // Full-screen attack - one from each spawn point
                                        do enemies.spawnEnemyFromTop();
                                        do Sys.wait(3);
                                        do enemies.spawnEnemyMidArea();
                                        do Sys.wait(3);
                                        do enemies.spawnEnemyFromBottom();
                                    }
                                    else {
                                        if (spawnPattern = 6) {
                                            // Double attack from top and right
                                            do enemies.spawnEnemyFromTop();
                                            do enemies.spawnEnemy();
                                            do Sys.wait(8);
                                            do enemies.spawnEnemyFromTop();
                                            do enemies.spawnEnemy();
                                        }
                                        else {
                                            // Double attack from bottom and right
                                            do enemies.spawnEnemyFromBottom();
                                            do enemies.spawnEnemy();
                                            do Sys.wait(8);
                                            do enemies.spawnEnemyFromBottom();
                                            do enemies.spawnEnemy();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            // Update all game elements
            do enemies.update();
            do bullets.move();
            do jet.draw();
            
            // Check for collisions
            do enemies.checkBulletCollisions(bullets);
            
            if (enemies.checkCollisionWithPlayer(jet.getX(), jet.getY())) {
                do jet.loseLife();
                do displayLives();
                if (jet.isAlive()) {
                    do respawnPlayer();
                } else {
                    let gameOver = true;
                }
            }
            
            // Display the current score
            do enemies.displayScore();

            if (jet.getY() > 1850) {
                do jet.loseLife();
                do displayLives();
                if (jet.isAlive()) {
                    do respawnPlayer();
                } else {
                    let gameOver = true;
                }
            }

            if (gameOver) {
                do score.updateHighScore();  // Update high score before showing game over
                let over = GameOver.new(score);
                do over.show();

                while (true) {
                    let key1 = Keyboard.keyPressed();
                    if (key1 = 82) {
                        do dispose();
                        let game = Game.new();
                        do game.run();
                    }
                }
            }

            do Sys.wait(5);  // Delay to reduce flickering
        }

        return;
    }

    /** 
     * Cleanup method - frees all allocated memory
     * Called when game ends or restarts
     */
    method void dispose() {
        do jet.dispose();
        do bullets.dispose();
        do enemies.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
